"""HealthBot Graph State.

This module defines the shared state schema used across all nodes in the
HealthBot conversation graph. The state is used to persist information throughout
the execution flow and enable communication between different components.

HealthBotState uses TypedDict to ensure type safety and integration with
LangGraph, allowing the state to be automatically serialized and
deserialized during graph execution.
"""

from typing import Any
from typing import Annotated, TypedDict

from langchain_core.messages import BaseMessage
from langgraph.graph.message import add_messages


class HealthBotState(TypedDict):
    """Represents the shared state of the HealthBot graph.

    This state is passed between all graph nodes during execution,
    accumulating information and allowing different components to
    access and modify data relevant to the conversation.

    The state is automatically persisted by LangGraph, enabling
    session recovery and continuation of interrupted conversations.

    Attributes:
        messages: List of conversation messages. Uses `add_messages`
            to automatically accumulate messages without overwriting
            existing history. Contains user, assistant, and system messages.
        topic: Health topic extracted from the user's question.
            Populated by the topic extraction node. Can be `None`
            until the topic is identified.
        results: Search results obtained from the Tavily tool.
            Contains relevant information about the researched topic.
            Can be `None` until the search node execution.
        summary: Concise summary generated by the LLM based on search
            results. Presented to the user as the final response.
            Can be `None` until the summarization node execution.
        quiz_question: Quiz question generated to test the user's
            knowledge about the discussed topic. Implemented in MVP3.
            Can be `None` if the quiz hasn't been generated.
        quiz_answer: Answer provided by the user for the quiz question.
            Used for evaluation and feedback. Can be `None` until
            the user responds.
        grade: Quiz evaluation result containing score and feedback.
            Structure: `{"score": int, "feedback": str, "citations": list}`. 
            Can be `None` until the evaluation is processed.
        continue_learning: Boolean indicating if the user wants to learn
            about another topic. Implemented in MVP4 for conversation loop.
            Can be `None` until the user responds to the continuation question.

    Example:
        ```python
        # Initial state
        initial_state = HealthBotState(
            messages=[HumanMessage(content="How to prevent diabetes?")],
            topic=None,
            results=None,
            summary=None,
            quiz_question=None,
            quiz_answer=None,
            grade=None,
            continue_learning=None
        )

        # After topic extraction
        state_with_topic = HealthBotState(
            messages=[HumanMessage(content="How to prevent diabetes?")],
            topic="diabetes prevention",
            results=None,
            summary=None,
            quiz_question=None,
            quiz_answer=None,
            grade=None,
            continue_learning=None
        )
        ```

    Note:
        All fields except `messages` can be `None` during different
        phases of graph execution. The `messages` field always contains
        at least an initial user message.

    See Also:
        - `langgraph.graph.message.add_messages`: Function responsible for
          automatic message accumulation.
        - `langchain_core.messages.BaseMessage`: Base class for all
          LangChain messages.
    """

    #* Message field with automatic accumulation
    messages: Annotated[list[BaseMessage], add_messages]
    
    #* Main flow fields
    topic: str | None
    results: str | None
    summary: str | None
    
    #* Quiz system fields
    quiz_question: str | None      # Question generated by LLM
    quiz_answer: str | None        # Answer provided by user
    grade: dict[str, Any] | None   # Evaluation result: {score: int, feedback: str, citations: list}
    
    #* Continuation loop field
    continue_learning: bool | None  # Whether user wants to learn another topic