"""Testa o grafo completo do MVP2 com Human-in-the-Loop.

Execute: python src/healthbot/test_graph_mvp2.py
"""

from langchain_core.messages import HumanMessage

from healthbot.graph import create_graph
from healthbot.state import HealthBotState


def main():
    """Executa o fluxo completo do MVP2 com 3 invoca√ß√µes."""
    print("\n")
    print("=" * 70)
    print("üöÄ TESTANDO GRAFO MVP2 - HUMAN-IN-THE-LOOP")
    print("=" * 70)
    print()
    
    # Cria o grafo
    app = create_graph()
    
    # Configura√ß√£o com thread_id (identifica a sess√£o)
    config = {"configurable": {"thread_id": "test-user-123"}}
    
    # Estado inicial
    initial_state: HealthBotState = {
        "messages": [],
        "topic": None,
        "results": None,
        "summary": None,
    }
    
    try:
        # ==========================================
        # EXECU√á√ÉO 1: Pergunta o t√≥pico
        # ==========================================
        print("üìç PASSO 1: Perguntando t√≥pico ao usu√°rio")
        print("-" * 70)
        
        # Primeira invoca√ß√£o: executa at√© a primeira pausa
        app.invoke(initial_state, config)
        
        # Pega o estado atual do checkpointer
        state1 = app.get_state(config)
        
        # Exibe a mensagem do bot
        last_message = state1.values["messages"][-1]
        print(f"\nü§ñ HealthBot: {last_message.content}\n")
        
        # Grafo PAUSOU antes de "receive_topic"
        print(f"‚è∏Ô∏è  Grafo pausou em: {state1.next}")
        print("-" * 70)
        print()
        
        # ==========================================
        # SIMULA√á√ÉO: Usu√°rio digita "hipertens√£o"
        # ==========================================
        print("üìç PASSO 2: Usu√°rio fornece o t√≥pico")
        print("-" * 70)
        
        user_topic = "hipertens√£o"
        print(f"üë§ Usu√°rio: {user_topic}\n")
        
        # ==========================================
        # EXECU√á√ÉO 2: Processa o t√≥pico e gera resumo
        # ==========================================
        print("üîÑ Continuando execu√ß√£o...")
        print("-" * 70)
        
        # IMPORTANTE: Atualiza o estado com o input do usu√°rio
        app.update_state(
            config,
            {"messages": [HumanMessage(content=user_topic)]},
        )
        
        # Continua a execu√ß√£o (passa None para continuar de onde parou)
        app.invoke(None, config)
        
        # Pega o estado atualizado
        state2 = app.get_state(config)
        
        # Grafo executou: receive_topic ‚Üí search ‚Üí summarize ‚Üí present
        # E PAUSOU antes de "wait_ready"
        
        # Exibe o resumo (pen√∫ltima mensagem) e a pergunta (√∫ltima)
        messages = state2.values["messages"]
        summary_msg = messages[-2]
        question_msg = messages[-1]
        
        print(f"\nü§ñ HealthBot apresentou o resumo:")
        print(f"{summary_msg.content[:200]}...\n")
        print(f"ü§ñ {question_msg.content}\n")
        
        print(f"‚è∏Ô∏è  Grafo pausou em: {state2.next}")
        print("-" * 70)
        print()
        
        # ==========================================
        # SIMULA√á√ÉO: Usu√°rio confirma
        # ==========================================
        print("üìç PASSO 3: Usu√°rio confirma prontid√£o")
        print("-" * 70)
        
        user_confirmation = "pronto"
        print(f"üë§ Usu√°rio: {user_confirmation}\n")
        
        # ==========================================
        # EXECU√á√ÉO 3: Finaliza
        # ==========================================
        print("üîÑ Finalizando...")
        print("-" * 70)
        
        # Atualiza o estado com a confirma√ß√£o
        app.update_state(
            config,
            {"messages": [HumanMessage(content=user_confirmation)]},
        )
        
        # Continua at√© o fim
        app.invoke(None, config)
        
        # Pega o estado final
        final_state_obj = app.get_state(config)
        final_state = final_state_obj.values
        
        # Grafo executou wait_ready e terminou
        
        print()
        print("=" * 70)
        print("‚úÖ GRAFO MVP2 EXECUTADO COM SUCESSO!")
        print("=" * 70)
        print()
        
        # ==========================================
        # VALIDA√á√ÉO DO RESULTADO
        # ==========================================
        print("üîç VALIDA√á√ÉO DO RESULTADO")
        print("=" * 70)
        
        assert final_state["topic"] is not None, "‚ùå Topic n√£o foi definido"
        print(f"‚úÖ Topic: {final_state['topic']}")
        
        assert final_state["results"] is not None, "‚ùå Results n√£o foram preenchidos"
        print(f"‚úÖ Results: {len(final_state['results'])} caracteres")
        
        assert final_state["summary"] is not None, "‚ùå Summary n√£o foi gerado"
        print(f"‚úÖ Summary: {len(final_state['summary'])} caracteres")
        
        print(f"‚úÖ Total de mensagens: {len(final_state['messages'])}")
        
        print()
        print("=" * 70)
        print("üéâ TESTE COMPLETO PASSOU!")
        print("=" * 70)
        print()
        print("üí° Pr√≥ximo passo: Implementar interface interativa no main.py")
        
    except Exception as e:
        print()
        print("=" * 70)
        print("‚ùå ERRO NO TESTE")
        print("=" * 70)
        print(f"Erro: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()